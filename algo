
//lcm of two numbers
function findlCM(num1,num2)
{
    
    let max = (num1 > num2) ? num1 : num2;
while (true) {
    if (max % num1 == 0 && max % num2 == 0) {
  
        break;
    }
    max++;
}
    return max
}

let lcm= findlCM(6,10)
console.log(lcm)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//DUPLICATES IN ARRAY

let numbers=[1,2,3,4,11,2,3,5,9,3,4,5]


let i=0;
let dup=new Set
while(i<numbers.length){
   console.log(numbers[i])
   if(numbers.indexOf(numbers[i])!=numbers.lastIndexOf(numbers[i]))
   {
       dup.add(numbers[i])
   }
    i++
    }
    console.log([...dup])
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

max lcm of adjacent in in arrays

function FindLcm(num1,num2){
       
    let max = (num1 > num2) ? num1 : num2;
while (true) {
    if (max % num1 == 0 && max % num2 == 0) {
  
        break;
    }
    max++;
}
    return max
}


function largestAdjacentLCM(arr) {
    // Write your code here
    const newarr=[]
    for(let i=0;i<arr.length;i++){
      if(arr[i+1])
        {
        const lcm=FindLcm(arr[i],arr[i+1])
        newarr.push(lcm)
        }
    }
    console.log(newarr)
    return Math.max(...newarr)

}
largestAdjacentLCM([1,2,3,4,6,10])///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////

//Next missing charachter in alphabets array

function findMissingLetter(array)
{
  let missing=""
  for(let i=0;i<array.length;i++){
   if(array[i+1]){
      let index= array[i].charCodeAt(0)-96
    let arrayNext= array[i+1].charCodeAt(0)-96
    let next_alpha= index+1
    if(index+1!=arrayNext){
      missing=String.fromCharCode(next_alpha+96);
      break;
    }
   }
  }
  return missing;
}
partial keys

function partialKeys(h) {
  let fetch = (h,p) => (q = Object.keys(h).sort().find(n => n.startsWith(p)), q ? h[q] : undefined);
  return new Proxy(h, {
    get: (h, p) => fetch(h, p)
  });
}

